{"version":3,"sources":["store/index.js","components/ContactsBook/ContactsBook.jsx","App.js","reportWebVitals.js","index.js"],"names":["persistedState","localStorage","getItem","JSON","parse","contacts","actions","user","type","store","createStore","users","action","filter","item","pager","name","toLowerCase","lastname","ContactsBook","useState","currentUser","setCurrentUser","setName","setLastname","age","setAge","setPager","dispatch","useDispatch","useSelector","state","subscribe","setItem","stringify","getState","className","scope","map","person","onClick","changeState","class","for","id","value","onChange","ev","preventDefault","target","trim","newContact","createNewContact","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.48c3be55.chunk.js","sourcesContent":["import { createStore } from 'redux';\nimport contacts from \"../api/contacts.json\";\n\nconst persistedState = localStorage.getItem('reduxState')\n  ? JSON.parse(localStorage.getItem('reduxState'))\n  : [...contacts];\n// const persistedState = [...contacts];\n\nconst ADD = 'ADD';\nconst CHANGE = 'CHANGE';\nconst DELETE = 'DELETE';\n\nexport const actions = {\n  add: (user) => ({ type: ADD, user }),\n  change: (user) => ({ type: CHANGE, user }),\n  delete: (user) => ({ type: DELETE, user }),\n}\n\nconst usersReducer = function (users = persistedState, action) {\n  switch (action.type) {\n\n    case \"DELETE\":\n      return users.filter(item => item.pager !== action.user.pager);\n    case \"ADD\":\n    case \"CHANGE\":\n      return [...users.filter(item => (item.name.toLowerCase() !== action.user.name.toLowerCase() && item.lastname.toLowerCase() !== action.user.lastname.toLowerCase())), action.user];\n    default:\n      return users;\n  }\n};\n\nexport const store = createStore(usersReducer);","import React, { useState } from 'react';\nimport { actions, store } from '../../store';\nimport { useDispatch, useSelector } from 'react-redux';\n\nexport const ContactsBook = () => {\n  const [currentUser, setCurrentUser] = useState(false);\n  const [name, setName] = useState('');\n  const [lastname, setLastname] = useState('');\n  const [age, setAge] = useState('');\n  const [pager, setPager] = useState('');\n\n  const dispatch = useDispatch();\n  const users = useSelector((state) => state);\n\n  store.subscribe(() => {\n    localStorage.setItem('reduxState', JSON.stringify(store.getState()))\n  });\n\n  function createNewContact() {\n    let newContact = {\n      name,\n      lastname,\n      age,\n      pager\n    };\n\n    setName('');\n    setLastname('');\n    setAge('');\n    setPager('');\n    setCurrentUser(false);\n\n    return newContact;\n  }\n\n  function changeState(person) {\n    setCurrentUser(true);\n    setName(person.name);\n    setLastname(person.lastname);\n    setAge(person.age);\n    setPager(person.pager);\n  }\n\n  return (\n    <>\n      <table className=\"table\">\n        <thead>\n          <tr>\n            <th scope=\"col\">Name</th>\n            <th scope=\"col\">Last name</th>\n            <th scope=\"col\">Age</th>\n            <th scope=\"col\">Pager</th>\n          </tr>\n        </thead>\n        <tbody>\n          {users.map((person) => (\n            <tr key={person.pager}>\n              <td>{person.name}</td>\n              <td>{person.lastname}</td>\n              <td>{person.age}</td>\n              <td>{person.pager}</td>\n              <td><button type='button' className=\"btn btn-danger mr-1\" onClick={() => dispatch(actions.delete(person))}>\n                REMOVE\n              </button></td>\n              <td>\n                <button className=\"btn btn-warning\" onClick={() => changeState(person)}>\n                  CHANGE\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n      <div className=\"d-flex p-2\">\n        <form className=\"form\">\n          <div class=\"form-group\">\n            <label for=\"name\">Enter name</label><br />\n            <input id=\"name\" type=\"text\" value={name} onChange={(ev) => { ev.preventDefault(); setName(ev.target.value.trim()) }}></input>\n          </div>\n          <div class=\"form-group\">\n            <label for=\"lastname\">Enter last name</label><br />\n            <input id=\"lastname\" type=\"text\" value={lastname} onChange={(ev) => { ev.preventDefault(); setLastname(ev.target.value.trim()) }}></input>\n          </div>\n          <div class=\"form-group\">\n            <label for=\"lastname\">Enter age</label><br />\n            <input id=\"age\" type=\"number\" value={age} onChange={(ev) => setAge(ev.target.value)}></input>\n           \n          </div>\n          <div class=\"form-group\">\n            <label for=\"lastname\">Enter pager</label><br />\n            <input id=\"age\" type=\"number\" value={pager} onChange={(ev) => setPager(ev.target.value)}></input>\n          </div>\n          <button type='button' className=\"btn btn-primary mr-1\" onClick={() => {\n            if (name && lastname && age && pager) {\n              dispatch(actions.change(createNewContact()));\n            }\n          }\n          }>\n            {currentUser ? 'CHANGE' : 'ADD'}\n          </button>\n\n\n        </form>\n      </div>\n    </>\n  )\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport { ContactsBook } from './components/ContactsBook';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <ContactsBook />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { store } from './store';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n          <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}